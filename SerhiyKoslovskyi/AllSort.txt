<?php
$arr = array(array(9, 4, 3, 32, 19),
	     array(1, 93, 29, 12, 4),
	     array(22, 11, 33, 45, 1),
	     array(9, 7, 4, 3, 5),
	     array(0, 23, 14, 18, 20)
	    );

function printMatrix($a)
{
    for($i = 0; $i < count($a); $i++) {
        for($j = 0; $j < count($a[$i]); $j++) {
            echo $a[$i][$j] . ' ';
	}
		    echo '<br>';
    }
}

function printVector($v)
{
    for ($i=0; $i < count($v); $i++) {
		echo $v[$i] . ' ';
    }
    echo '<br>';
}

function copyInVector($a)
{
    $copy = [];
    for($i = 0; $i < count($a); $i++) {
	for($j = 0; $j < count($a[$i]); $j++) {
      	    array_push($copy, $a[$i][$j]);
	}
    }
	return $copy;
}

function copyInMatrixH($copy, $a)
{
    $i = 0;
    $j = 0;
    for ($k = 0; $k < count($copy); $k++) {
        $a[$i][$j] = $copy[$k];
	$j++;
        if ($j == count($a[$i])) {
	    $i++;
	    $j = 0;
	}
    }
    return $a;
}

function copyInMatrixVA($copy, $a)
{
    $i = 0;
    $j = 0;
    for ($k = 0; $k < count($copy); $k++) {
        $a[$j][$i] = $copy[$k];
        $j++;
        if ($j == count($a[$i])) {
            $i++;
	    $j = 0;
	}
    }
    return $a;
}

function copyInMatrixVB($copy, $a)
{
    $i = count($a) - 1;
    $j = count($a[$i]) - 1;
    for ($k = 0; $k < count($copy); $k++) {
        $a[$j][$i] = $copy[$k];
	$j--;
	if ($j < 0 && $i > 0) {
	    $i--;
	    $j = count($a[$i]) - 1;
        }
    }
    return $a;
}

function horizonSort($a)
{
    $copy = copyInVector($a);
    sort($copy);
    $a = copyInMatrix($copy, $a);
    return $a;
}

function verticalASort($a) {
    $copy = copyInVector($a);
    sort($copy);
    $a = copyInMatrixVA($copy, $a);
    return $a;
}

function verticalBSort($a) {
    $copy = copyInVector($a);
    sort($copy);
    $a = copyInMatrixVB($copy, $a);
    return $a;
}

function snailSort($a)
{
    $copy = [];
    $copy = copyInVector($a);
    sort($copy);
    $i = 0;
    $j = 0;
    $tb = 0;
    $bb = count($a) - 1;
    $lb = 0;
    $rb = count($a[0]) - 1;
    $dir = 0;
    for ($k = 0; $k < count($copy); $k++) {
        $a[$i][$j] = $copy[$k];
     	switch ($dir) {
            case 0:
                $j++;
              	if($j == $rb) {
            	    $dir = 1;
                    $tb++;
              	}
              	break;
            case 1:
              	$i++;
              	if($i == $bb) {
                    $dir = 2;
                    $rb--;
              	}
              	break;
            case 2:
              	$j--;
              	if($j == $lb)
              	{
                    $dir = 3;
                    $bb--;
              	}
              	break;
            case 3:
              	$i--;
              	if($i == $tb) {
                    $dir = 0;
                    $lb++;
              	}
              	break;
      	}
    }
    return $a;
}

function snailSort2($a)
{
    $copy = [];
    $copy = copyInVector($a);
    rsort($copy);
    $i = 0;
    $j = 0;
    $tb = 0;
    $bb = count($a) - 1;
    $lb = 0;
    $rb = count($a[0]) - 1;
    $dir = 0;
    for ($k = 0; $k < count($copy); $k++) {
	$a[$i][$j] = $copy[$k];
      	switch ($dir) {
            case 0:
                $j++;
              	if($j == $rb) {
                    $dir = 1;
                    $tb++;
              	}
              	break;
            case 1:
              	$i++;
              	if($i == $bb) {
                    $dir = 2;
                    $rb--;
              	}
              	break;
            case 2:
              	$j--;
              	if($j == $lb) {
                    $dir = 3;
                    $bb--;
              	}
              	break;
          case 3:
              	$i--;
              	if($i == $tb) {
                    $dir = 0;
                    $lb++;
              	}
              	break;
      	}
    }
    return $a;
}

function diagonalSort($a)
{
    $copy = [];
    $copy = copyInVector($a);
    sort($copy);
    $i = 0;
    $j = 0;
    $dir = 0;
    $mark = 0;
    for ($k = 0; $k < count($copy); $k++) {
        $a[$i][$j] = $copy[$k];
	if($mark) {
	    if($mark == 1) {
	        $j++;
	    } elseif($mark == 2) {
		$j--;
	    }
	    $i++;
	}
	switch($dir) {
	    case 0:
	        if($j < count($a[0]) - 1) {
		    $j++;
		    $mark = 0;
		    if ($j == count($a[0]) - 1) {
		        $dir = 1;
		        $mark = 1;
		    }
		}
		break;
	    case 1:
		if($j > 0) {
		    $j--;
		    $mark = 0;
			if ($j == 0) {
			    $dir = 0;
			    $mark = 2;
			}
		}
		break;
	}
    } 
    echo '<br>';
    return $a;
}

function SnackSort($a)
{
    $copy = [];
    $copy = copyInVector($a);
    sort($copy);
    $i = 0;
    $j = 0;
    $dir = 0;
    $mark = 0;
    for ($k = 0; $k < count($copy); $k++) {
	$a[$i][$j] = $copy[$k];
	if($mark) {
	    if($mark == 1) {
                $j++;
	    } elseif($mark == 2) {
		$j--;
	    }
	    $i++;
	}
	switch($dir) {
	    case 0:
		if($j < count($a[0]) - 1) {
		    $j++;
		    $mark = 0;
		    if ($j == count($a[0]) - 1) {
			$dir = 1;
			$mark = 1;
		    }
		}
		break;
	    case 1:
		if($j > 0) {
		    $j--;
		    $mark = 0;
		    if ($j == 0) {
			$dir = 0;
			$mark = 2;
		    }
		}
		break;
	}
    }
    echo '<br>';
    return $a;
}
